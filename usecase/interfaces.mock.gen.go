// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/interfaces.go

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"
	time "time"

	generated "github.com/amartha-test/generated"
	aggregate "github.com/amartha-test/model/aggregate"
	gomock "github.com/golang/mock/gomock"
)

// MockUseCaseInterface is a mock of UseCaseInterface interface.
type MockUseCaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseInterfaceMockRecorder
}

// MockUseCaseInterfaceMockRecorder is the mock recorder for MockUseCaseInterface.
type MockUseCaseInterfaceMockRecorder struct {
	mock *MockUseCaseInterface
}

// NewMockUseCaseInterface creates a new mock instance.
func NewMockUseCaseInterface(ctrl *gomock.Controller) *MockUseCaseInterface {
	mock := &MockUseCaseInterface{ctrl: ctrl}
	mock.recorder = &MockUseCaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCaseInterface) EXPECT() *MockUseCaseInterfaceMockRecorder {
	return m.recorder
}

// CreateLoan mocks base method.
func (m *MockUseCaseInterface) CreateLoan(ctx context.Context, now time.Time, request generated.LoanRequest) (*aggregate.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoan", ctx, now, request)
	ret0, _ := ret[0].(*aggregate.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoan indicates an expected call of CreateLoan.
func (mr *MockUseCaseInterfaceMockRecorder) CreateLoan(ctx, now, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoan", reflect.TypeOf((*MockUseCaseInterface)(nil).CreateLoan), ctx, now, request)
}

// GetDelinquentLoans mocks base method.
func (m *MockUseCaseInterface) GetDelinquentLoans(ctx context.Context) ([]aggregate.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelinquentLoans", ctx)
	ret0, _ := ret[0].([]aggregate.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDelinquentLoans indicates an expected call of GetDelinquentLoans.
func (mr *MockUseCaseInterfaceMockRecorder) GetDelinquentLoans(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelinquentLoans", reflect.TypeOf((*MockUseCaseInterface)(nil).GetDelinquentLoans), ctx)
}

// GetLoanID mocks base method.
func (m *MockUseCaseInterface) GetLoanID(ctx context.Context, loanID string) (*aggregate.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoanID", ctx, loanID)
	ret0, _ := ret[0].(*aggregate.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoanID indicates an expected call of GetLoanID.
func (mr *MockUseCaseInterfaceMockRecorder) GetLoanID(ctx, loanID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoanID", reflect.TypeOf((*MockUseCaseInterface)(nil).GetLoanID), ctx, loanID)
}

// MakePayment mocks base method.
func (m *MockUseCaseInterface) MakePayment(ctx context.Context, loanID string, amount float32, paymentDate time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakePayment", ctx, loanID, amount, paymentDate)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakePayment indicates an expected call of MakePayment.
func (mr *MockUseCaseInterfaceMockRecorder) MakePayment(ctx, loanID, amount, paymentDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakePayment", reflect.TypeOf((*MockUseCaseInterface)(nil).MakePayment), ctx, loanID, amount, paymentDate)
}
