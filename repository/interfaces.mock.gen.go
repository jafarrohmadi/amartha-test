// Code generated by MockGen. DO NOT EDIT.
// Source: repository/interfaces.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	aggregate "github.com/amartha-test/model/aggregate"
	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CreateLoan mocks base method.
func (m *MockRepositoryInterface) CreateLoan(ctx context.Context, loan aggregate.Loan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoan", ctx, loan)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLoan indicates an expected call of CreateLoan.
func (mr *MockRepositoryInterfaceMockRecorder) CreateLoan(ctx, loan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoan", reflect.TypeOf((*MockRepositoryInterface)(nil).CreateLoan), ctx, loan)
}

// CreateLoanSchedule mocks base method.
func (m *MockRepositoryInterface) CreateLoanSchedule(ctx context.Context, loanSchedule aggregate.LoanSchedule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoanSchedule", ctx, loanSchedule)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLoanSchedule indicates an expected call of CreateLoanSchedule.
func (mr *MockRepositoryInterfaceMockRecorder) CreateLoanSchedule(ctx, loanSchedule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoanSchedule", reflect.TypeOf((*MockRepositoryInterface)(nil).CreateLoanSchedule), ctx, loanSchedule)
}

// CreatePayment mocks base method.
func (m *MockRepositoryInterface) CreatePayment(ctx context.Context, transaction aggregate.LoanTransaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", ctx, transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockRepositoryInterfaceMockRecorder) CreatePayment(ctx, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockRepositoryInterface)(nil).CreatePayment), ctx, transaction)
}

// GetLastPayment mocks base method.
func (m *MockRepositoryInterface) GetLastPayment(ctx context.Context, loanID string) (aggregate.LoanTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastPayment", ctx, loanID)
	ret0, _ := ret[0].(aggregate.LoanTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastPayment indicates an expected call of GetLastPayment.
func (mr *MockRepositoryInterfaceMockRecorder) GetLastPayment(ctx, loanID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastPayment", reflect.TypeOf((*MockRepositoryInterface)(nil).GetLastPayment), ctx, loanID)
}

// GetLoanActive mocks base method.
func (m *MockRepositoryInterface) GetLoanActive(ctx context.Context) ([]aggregate.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoanActive", ctx)
	ret0, _ := ret[0].([]aggregate.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoanActive indicates an expected call of GetLoanActive.
func (mr *MockRepositoryInterfaceMockRecorder) GetLoanActive(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoanActive", reflect.TypeOf((*MockRepositoryInterface)(nil).GetLoanActive), ctx)
}

// GetLoanByID mocks base method.
func (m *MockRepositoryInterface) GetLoanByID(ctx context.Context, loanID string) (aggregate.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoanByID", ctx, loanID)
	ret0, _ := ret[0].(aggregate.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoanByID indicates an expected call of GetLoanByID.
func (mr *MockRepositoryInterfaceMockRecorder) GetLoanByID(ctx, loanID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoanByID", reflect.TypeOf((*MockRepositoryInterface)(nil).GetLoanByID), ctx, loanID)
}

// GetLoanSchedulesNotPaid mocks base method.
func (m *MockRepositoryInterface) GetLoanSchedulesNotPaid(ctx context.Context, loanID string) ([]aggregate.LoanSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoanSchedulesNotPaid", ctx, loanID)
	ret0, _ := ret[0].([]aggregate.LoanSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoanSchedulesNotPaid indicates an expected call of GetLoanSchedulesNotPaid.
func (mr *MockRepositoryInterfaceMockRecorder) GetLoanSchedulesNotPaid(ctx, loanID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoanSchedulesNotPaid", reflect.TypeOf((*MockRepositoryInterface)(nil).GetLoanSchedulesNotPaid), ctx, loanID)
}

// UpdateLoan mocks base method.
func (m *MockRepositoryInterface) UpdateLoan(ctx context.Context, loan aggregate.Loan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoan", ctx, loan)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLoan indicates an expected call of UpdateLoan.
func (mr *MockRepositoryInterfaceMockRecorder) UpdateLoan(ctx, loan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoan", reflect.TypeOf((*MockRepositoryInterface)(nil).UpdateLoan), ctx, loan)
}

// UpdateLoanSchedule mocks base method.
func (m *MockRepositoryInterface) UpdateLoanSchedule(ctx context.Context, loan aggregate.LoanSchedule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoanSchedule", ctx, loan)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLoanSchedule indicates an expected call of UpdateLoanSchedule.
func (mr *MockRepositoryInterfaceMockRecorder) UpdateLoanSchedule(ctx, loan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoanSchedule", reflect.TypeOf((*MockRepositoryInterface)(nil).UpdateLoanSchedule), ctx, loan)
}
